// Generated by CoffeeScript 1.6.3
(function() {
  var Finder, expect, fs, path, tree;

  expect = require('chai').expect;

  path = require('path');

  Finder = require('../../lib/Finder');

  fs = null;

  tree = {
    eight: {
      3: {
        4: {
          'file.json': ''
        }
      },
      '._.js': '',
      'other.js': '',
      'package.json': ''
    },
    seven: {
      13: '',
      14: '',
      twelve: ''
    },
    six: {
      eleven: '',
      nine: '',
      ten: ''
    },
    '.cache': '',
    0: '',
    1: '',
    five: 'hello word',
    'five~': '',
    one: '',
    three: '',
    two: ''
  };

  describe('Finder.async', function() {
    beforeEach(function() {
      return fs = Finder.mock(tree);
    });
    afterEach(function() {
      return Finder.restore();
    });
    describe('#constructor()', function() {
      return it('should throw an error if path is not directory', function() {
        return expect(function() {
          return new Finder("/two");
        }).to["throw"](Error, "Path /two is not directory");
      });
    });
    describe('#findFiles()', function() {
      return it('should return file names from root folder', function(done) {
        return Finder["in"]('/').findFiles(function(files) {
          expect(files).to.have.members(["/0", "/1", "/five", "/one", "/three", "/two"]);
          return done();
        });
      });
    });
    describe('#findDirectories()', function() {
      return it('should return directory names from root folder', function(done) {
        return Finder["in"]('/').findDirectories(function(directories) {
          expect(directories).to.have.members(["/eight", "/seven", "/six"]);
          return done();
        });
      });
    });
    describe('#find()', function() {
      return it('should return file and directory names from root folder', function(done) {
        return Finder["in"]('/').find(function(paths) {
          expect(paths).to.have.members(["/0", "/1", "/eight", "/seven", "/six", "/five", "/one", "/three", "/two"]);
          return done();
        });
      });
    });
    describe('#recursive()', function() {
      return it('should return file names recursively from find* methods', function(done) {
        return Finder.from('/').findFiles(function(files) {
          expect(files).to.have.members(["/0", "/1", "/eight/3/4/file.json", "/eight/other.js", "/eight/package.json", "/seven/13", "/seven/14", "/seven/twelve", "/six/eleven", "/six/nine", "/six/ten", "/five", "/one", "/three", "/two"]);
          return done();
        });
      });
    });
    describe('#findFirst()', function() {
      it('should return file path', function(done) {
        return Finder["in"]('/').findFirst().findFiles(function(file) {
          expect(file).to.be.equal("/0");
          return done();
        });
      });
      it('should return null', function(done) {
        return Finder["in"]('/').findFirst().findFiles('randomName', function(file) {
          expect(file).to.be["null"];
          return done();
        });
      });
      it('should return file path for first name with two numbers in name', function(done) {
        return Finder.from('/').findFirst().findFiles('<[0-9]{2}>', function(file) {
          expect(file).to.be.equal("/seven/13");
          return done();
        });
      });
      it('should return null for recursive searching', function(done) {
        return Finder.from('/').findFirst().findFiles('randomName', function(file) {
          expect(file).to.be["null"];
          return done();
        });
      });
      it('should return first path to directory', function(done) {
        return Finder.from('/').findFirst().findDirectories('4', function(directory) {
          expect(directory).to.be.equal("/eight/3/4");
          return done();
        });
      });
      it('should return null when looking into parents', function(done) {
        return Finder["in"]('/eight/3/4').lookUp(4).findFirst().findFiles('twelve', function(file) {
          expect(file).to.be["null"];
          return done();
        });
      });
      return it('should return first file when looking into parents recursively', function(done) {
        return Finder.from("/eight/3/4").lookUp(4).findFirst().findFiles('twelve', function(file) {
          expect(file).to.equal("/seven/twelve");
          return done();
        });
      });
    });
    describe('#exclude()', function() {
      return it('should return files which has not got numbers in name', function(done) {
        return Finder["in"]('/').exclude(['<[0-9]>']).findFiles(function(files) {
          expect(files).to.have.members(["/five", "/one", "/three", "/two"]);
          return done();
        });
      });
    });
    describe('#showSystemFiles()', function() {
      return it('should return also system, hide and temp files', function(done) {
        return Finder["in"]('/').showSystemFiles().findFiles(function(files) {
          expect(files).to.have.members(["/0", "/1", "/.cache", "/five", "/five~", "/one", "/three", "/two"]);
          return done();
        });
      });
    });
    describe('#lookUp()', function() {
      it('should return path to file in parent directory', function(done) {
        return Finder["in"]("/eight/3/4").lookUp(4).showSystemFiles().findFiles('._.js', function(files) {
          expect(files).to.have.members(["/eight/._.js"]);
          return done();
        });
      });
      it('should return first file in parent directory with depth set by string', function(done) {
        return Finder["in"]("/eight").lookUp('/').findFiles('package.json', function(files) {
          expect(files).to.be.eql(["/eight/package.json"]);
          return done();
        });
      });
      it('should return null when limit parent is the same like searched directory and file is not there', function(done) {
        return Finder["in"]('/').lookUp('/').findFiles('package.json', function(files) {
          expect(files).to.be.eql([]);
          return done();
        });
      });
      it('should return path to file in parent directory recursively', function(done) {
        return Finder.from("/eight/3/4").lookUp(4).findFiles('twelve', function(files) {
          expect(files).to.be.eql(["/seven/twelve"]);
          return done();
        });
      });
      return it('should return first file in parent directories with depth set by string', function(done) {
        return Finder.from("/eight/3/4").lookUp('/').findFiles('twelve', function(files) {
          expect(files).to.be.eql(["/seven/twelve"]);
          return done();
        });
      });
    });
    describe('#size()', function() {
      return it('should return files with size between 2000B and 3000B', function(done) {
        return Finder["in"]('/').size('>=', 9).size('<=', 11).findFiles(function(files) {
          expect(files).to.have.members(["/five"]);
          return done();
        });
      });
    });
    describe('#date()', function() {
      return it('should return files which were changed in less than 1 second ago', function(done) {
        return setTimeout(function() {
          fs.writeFileSync("/two", 'just some changes');
          return Finder["in"]('/').date('>', {
            milliseconds: 100
          }).findFiles(function(files) {
            expect(files).to.have.members(["/two"]);
            return done();
          });
        }, 200);
      });
    });
    return describe('#filter()', function() {
      return it('should return files which names are 3 chars length', function(done) {
        var filter;
        filter = function(stat, file) {
          var name;
          name = path.basename(file, path.extname(file));
          return name.length === 3;
        };
        return Finder["in"]('/').filter(filter).findFiles(function(files) {
          expect(files).to.have.members(["/one", "/two"]);
          return done();
        });
      });
    });
  });

}).call(this);
